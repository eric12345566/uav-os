import numpy as np
import cv2 as cv
from djitellopy import Tello
import time
from module.indoorLocationAlgo.QrcodePositionAlgo import streamDecode
import keyboard
import time


# Transfer location ID to (x, y) value
def transferLocationID(x):
    return {
        '-1': (-1, -1),
        '1': (0, 0), '11': (0, -30), '21': (0, -60), '31': (0, -90), '41': (0, -120),
        '2': (30, 0), '12': (30, -30), '22': (30, -60), '32': (30, -90), '42': (30, -120),
        '3': (60, 0), '13': (60, -30), '23': (60, -60), '33': (60, -90), '43': (60, -120),
        '4': (90, 0), '14': (90, -30), '24': (90, -60), '34': (90, -90), '44': (90, -120),
        '5': (120, 0), '15': (120, -30), '25': (120, -60), '35': (120, -90), '45': (120, -120),
        '6': (150, 0), '16': (150, -30), '26': (150, -60), '36': (150, -90), '46': (150, -120),
        '7': (180, 0), '17': (180, -30), '27': (180, -60), '37': (180, -90), '47': (180, -120),
        '8': (210, 0), '18': (210, -30), '28': (210, -60), '38': (210, -90), '48': (210, -120),
        '9': (240, 0), '19': (240, -30), '29': (240, -60), '39': (240, -90), '49': (240, -120),
        '10': (270, 0), '20': (270, -30), '30': (270, -60), '40': (270, -90), '50': (270, -120)
    }[x]


# Transfer location ID to (x, y) value
def transferLocationID2(x):
    return {
        '-1': (-1, -1), '8': (0, 0), '6': (0, -76), '4': (121, 0), '5': (152, -22),
        '3': (412, -124), '2': (445, -144), '1': (561, -260), '10': (141, -76), '24': (141, -96),
        '12': (106, -76), '14': (106, -55), '16': (533, -237), '17': (561, -237), '9': (587, -237),
        '7': (533, -260), '18': (587, -260), '11': (533, -283), '13': (561, -283), '15': (587, -283)
    }[x]


# Transfer location ID to (x, y) value
def transferLocationID3(x):
    return {
        '-1': (-1, -1),
        '2': (60, 0), '3': (90, 0), '4': (120, 0), '5': (150, 0), '6': (180, 0),
        '7': (210, 0), '8': (240, 0), '9': (270, 0), '10': (300, 0),
        '11': (330, 0), '12': (360, 0), '13': (420, 0), '14': (450, 0),
        '15': (480, 0), '16': (510, 0), '17': (540, 0), '18': (570, 0),
        '19': (0, -30), '20': (30, -30), '21': (60, -30), '22': (90, -30), '23': (120, -30),
        '24': (150, -30), '25': (180, -30), '26': (210, -30), '27': (240, -30), '28': (270, -30),
        '29': (300, -30), '30': (330, -30), '31': (360, -30), '32': (420, -30), '33': (450, -30),
        '34': (480, -30), '35': (510, -30), '36': (540, -30), '37': (570, -30), '38': (0, -60),
        '39': (30, -60), '40': (60, -60), '41': (90, -60), '42': (480, -60), '43': (510, -60), '44': (540, -60),
        '45': (570, -60), '46': (0, -90), '47': (30, -90), '48': (60, -90), '49': (90, -90), '50': (150, -90),
        '51': (180, -90), '52': (210, -90), '53': (240, -90), '54': (270, -90), '55': (300, -90), '56': (330, -90),
        '57': (360, -90), '58': (420, -90), '59': (450, -90), '60': (510, -90), '61': (540, -90), '62': (570, -90),
        '63': (60, -120), '64': (120, -120), '65': (150, -120), '66': (180, -120), '67': (210, -120), '68': (240, -120),
        '69': (270, -120), '70': (300, -120), '71': (330, -120), '72': (360, -120), '73': (420, -120),
        '74': (450, -120), '75': (510, -120), '76': (540, -120), '77': (570, -120), '78': (0, -150), '79': (30, -150),
        '80': (60, -150), '81': (120, -150), '82': (150, -150), '83': (180, -150), '84': (210, -150), '85': (240, -150),
        '86': (270, -150), '87': (300, -150), '88': (330, -150), '89': (360, -150), '90': (420, -150),
        '91': (450, -150), '92': (510, -150), '93': (540, -150), '94': (570, -150), '95': (0, -180), '96': (30, -180),
        '97': (60, -180), '98': (90, -180), '99': (120, -180), '100': (150, -180), '101': (180, -180),
        '102': (210, -180), '103': (240, -180), '104': (270, -180), '105': (300, -180), '106': (330, -180),
        '107': (360, -180), '108': (420, -180), '109': (450, -180), '110': (510, -180), '111': (540, -180),
        '112': (570, -180), '113': (0, -210), '114': (30, -210), '115': (60, -210), '116': (90, -210),
        '117': (150, -210), '118': (180, -210), '119': (210, -210), '120': (240, -210), '121': (270, -210),
        '122': (300, -210), '123': (330, -210), '124': (360, -210), '125': (420, -210), '126': (510, -210),
        '127': (540, -210), '128': (570, -210), '129': (0, -240), '130': (30, -240), '131': (60, -240),
        '132': (90, -240), '133': (120, -240), '134': (450, -240), '135': (480, -240), '136': (510, -240),
        '137': (540, -240), '138': (570, -240), '139': (0, -270), '140': (30, -270), '141': (60, -270),
        '142': (90, -270), '143': (120, -270), '144': (150, -270), '145': (180, -270), '146': (210, -270),
        '147': (240, -270), '148': (270, -270), '149': (300, -270), '150': (330, -270), '151': (360, -270),
        '152': (420, -270), '153': (450, -270), '154': (480, -270), '155': (510, -270), '156': (540, -270),
        '157': (570, -270),

    }[x]


def indoorLocationWorker(telloFrameBFR, indoorLocationShared, terminalService, tello):
    count = 1
    while True:
        frame = telloFrameBFR.frame
        count += 1
        # _, frame = cap.read()
        if count % 1 == 0:
            # flipFrame = frame = cv.flip(frame, 1)
            flipFrame = frame = cv.flip(frame, 0)
            rotateAngle, qrPosition, _ = streamDecode(flipFrame)
            # print('---------------Estimate Analytics----------------')
            # print('Rotate Angle: ' + str(rotateAngle))
            # print('Qrcode Position: ' + str(qrPosition))
            # print('-------------------------------------------------')

            # tello.send_rc_control(0, 0, 0, 0)
            indoorLocationShared.x_location, indoorLocationShared.y_location = transferLocationID3(str(qrPosition))
            indoorLocationShared.direction = rotateAngle
            terminalService.setInfo('rotate', rotateAngle)
            terminalService.setInfo('position_X', indoorLocationShared.x_location)
            terminalService.setInfo('position_Y', indoorLocationShared.y_location)

        # print(indoorLocationShared.direction)

    # x, y, dirt = indoorLocationAlgo(frame)

    # indoorLocationShared.x_location = x
    # indoorLocationShared.y_location = x
